#version 450

layout (constant_id = 0) const uint INPUT_SIZE = 3;
layout (constant_id = 1) const uint INPUT_DEPTH = 1;
layout (constant_id = 2) const uint KERNEL_OFFSET = 3;
layout (constant_id = 3) const uint OUTPUT_SIZE = 3;
layout (constant_id = 4) const uint OUTPUT_DEPTH = 1;
layout (constant_id = 5) const uint WORKGROUP_SIZE = 1;
layout (constant_id = 6) const uint WORKGROUP_SIZE_Z = 1;

layout(binding = 0) buffer Inp {
  float input_data[ ];
};

layout(binding = 1) buffer k {
  float kernel[ ];
};

layout(binding = 2) buffer Bias {
  float bias_data[ ];
};

layout(binding = 3) buffer Outp {
  float output_data[ ];
};

//https://www.khronos.org/registry/OpenGL/extensions/ARB/ARB_gl_spirv.txt
// in gl_NumWorkGroups
// in gl_WorkGroupSize
// in gl_WorkGroupID
// in gl_LocalInvocationID
// in gl_GlobalInvocationID
// in gl_LocalInvocationIndex

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout (local_size_x_id = 5) in;
layout (local_size_y_id = 5) in;
layout (local_size_z_id = 6) in;

// Real.x ---> gl_GlobalInvocationID.y
// Real.y ---> gl_GlobalInvocationID.z
// Real.z ---> gl_GlobalInvocationID.x

void main() {
  // return when out of bounds (i.e. the workgroup size does not fit the output size)
  uint coordX = gl_GlobalInvocationID.x;
  uint coordY = gl_GlobalInvocationID.y;
  uint coordZ = gl_GlobalInvocationID.z*16;

  if (coordX >= OUTPUT_SIZE || coordY >= OUTPUT_SIZE || coordZ >= OUTPUT_DEPTH)
    return;

  float sum = bias_data[coordZ];
  float sum0  = bias_data[coordZ];
  float sum1  = bias_data[coordZ + 1];
  float sum2  = bias_data[coordZ + 2];
  float sum3  = bias_data[coordZ + 3];
  float sum4  = bias_data[coordZ + 4];
  float sum5  = bias_data[coordZ + 5];
  float sum6  = bias_data[coordZ + 6];
  float sum7  = bias_data[coordZ + 7];
  float sum8  = bias_data[coordZ + 8];
  float sum9  = bias_data[coordZ + 9];
  float sum10 = bias_data[coordZ + 10];
  float sum11 = bias_data[coordZ + 11];
  float sum12 = bias_data[coordZ + 12];
  float sum13 = bias_data[coordZ + 13];
  float sum14 = bias_data[coordZ + 14];
  float sum15 = bias_data[coordZ + 15];
  uint kernel_offset = coordZ*KERNEL_OFFSET;
  uint input_x_base = coordX;
  uint input_x_offset = 0;
  uint input_y_base = coordY;
  uint input_y_offset = 0;
  
  input_y_offset = input_y_base;
  input_x_offset = input_x_base;
  float kval=0;
  float inVal = 0;
  for (int z=0; z<INPUT_DEPTH; ++z) {
    //kval = kernel[kernel_offset + z];
    inVal = input_data[(input_y_offset* INPUT_SIZE + input_x_offset)*INPUT_DEPTH + z];
    sum += kval
      * input_data[(input_y_offset* INPUT_SIZE + input_x_offset)*INPUT_DEPTH + z];
    sum0  += kernel[kernel_offset + z]*inVal;
    sum1  += kernel[kernel_offset + KERNEL_OFFSET*1  + z]*inVal;
    sum2  += kernel[kernel_offset + KERNEL_OFFSET*2  + z]*inVal;
    sum3  += kernel[kernel_offset + KERNEL_OFFSET*3  + z]*inVal;
    sum4  += kernel[kernel_offset + KERNEL_OFFSET*4  + z]*inVal;
    sum5  += kernel[kernel_offset + KERNEL_OFFSET*5  + z]*inVal;
    sum6  += kernel[kernel_offset + KERNEL_OFFSET*6  + z]*inVal;
    sum7  += kernel[kernel_offset + KERNEL_OFFSET*7  + z]*inVal;
    sum8  += kernel[kernel_offset + KERNEL_OFFSET*8  + z]*inVal;
    sum9  += kernel[kernel_offset + KERNEL_OFFSET*9  + z]*inVal;
    sum10 += kernel[kernel_offset + KERNEL_OFFSET*10 + z]*inVal;
    sum11 += kernel[kernel_offset + KERNEL_OFFSET*11 + z]*inVal;
    sum12 += kernel[kernel_offset + KERNEL_OFFSET*12 + z]*inVal;
    sum13 += kernel[kernel_offset + KERNEL_OFFSET*13 + z]*inVal;
    sum14 += kernel[kernel_offset + KERNEL_OFFSET*14 + z]*inVal;
    sum15 += kernel[kernel_offset + KERNEL_OFFSET*15 + z]*inVal;
  }
  
  //output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ] = sum < 0 ? 0 : sum > 6 ? 6 : sum;

  output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ] = sum0 < 0 ? 0 : sum0 > 6 ? 6 : sum0;
  output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ + 1] = sum1 < 0 ? 0 : sum1 > 6 ? 6 : sum1;
  output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ + 2] = sum2 < 0 ? 0 : sum2 > 6 ? 6 : sum2;
  output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ + 3] = sum3 < 0 ? 0 : sum3 > 6 ? 6 : sum3;
  output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ + 4] = sum4 < 0 ? 0 : sum4 > 6 ? 6 : sum4;
  output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ + 5] = sum5 < 0 ? 0 : sum5 > 6 ? 6 : sum5;
  output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ + 6] = sum6 < 0 ? 0 : sum6 > 6 ? 6 : sum6;
  output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ + 7] = sum7 < 0 ? 0 : sum7 > 6 ? 6 : sum7;
  output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ + 8] = sum8 < 0 ? 0 : sum8 > 6 ? 6 : sum8;
  output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ + 9] = sum9 < 0 ? 0 : sum9 > 6 ? 6 : sum9;
  output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ + 10] = sum10 < 0 ? 0 : sum10 > 6 ? 6 : sum10;
  output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ + 11] = sum11 < 0 ? 0 : sum11 > 6 ? 6 : sum11;
  output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ + 12] = sum12 < 0 ? 0 : sum12 > 6 ? 6 : sum12;
  output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ + 13] = sum13 < 0 ? 0 : sum13 > 6 ? 6 : sum13;
  output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ + 14] = sum14 < 0 ? 0 : sum14 > 6 ? 6 : sum14;
  output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ + 15] = sum15 < 0 ? 0 : sum15 > 6 ? 6 : sum15;


  //output_data[(coordY*OUTPUT_SIZE + coordX)*OUTPUT_DEPTH + coordZ] = 0;

}
